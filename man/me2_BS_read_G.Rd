% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/me2_BS_read_G.R
\name{me2_BS_read_G}
\alias{me2_BS_read_G}
\title{Get the G values from the BS results file (.txt)}
\usage{
me2_BS_read_G(
  me2_bs_txt_file,
  tidy_output = FALSE,
  block_boundaries = list(start = "^\\\\s*Factor matrix AA*", end =
    "^\\\\s*Factor matrix BB"),
  dates = NA,
  factor_mass = NA,
  rescale_unity = FALSE,
  tz = "Etc/GMT-1"
)
}
\arguments{
\item{me2_bs_txt_file}{output file (.txt), containing the results and
auxiliary information for the BS runs.}

\item{tidy_output}{Should the output be reshaped into tidy data? Default:
FALSE}

\item{block_boundaries}{A list containing the \dQuote{start} and \dQuote{end}
string used to identify the boundaries of the block containing the values
for the F-matrix.}

\item{dates}{A vector containing the sample dates for the rows in the
G-matrix. If these dates are outputted in the ME-2 output as the
second column (a column of row numbers being the first), then these values
are used when \code{dates = NA}. The values inside the ME-2 output are
overwritten when a vector if \code{dates} are provided.If this second
column with dates is not available new daily dates, starting from
1970-01-01 will be automatically provided.}

\item{factor_mass}{This is a vector with the same length as the number of
factor profiles. It contains the total mass in concentration units which is
used to transform the G matrix from unity to concentration units.}

\item{rescale_unity}{In some cases the averages of the G factors are not
equal to unity. By default a warning is given whenever this is the case.
With this parameter set to \code{TRUE} each factor is multiplied by
1/avg(factor), so that the G factors are scaled to unity again.}

\item{tz}{Parameter to control the timezone when parameter \dQuote{dates} is
not used. Default: 'Etc/GMT-1'#'}
}
\value{
(tidied) tibble containing G for multiple BS runs. The output of the
G-values for the BS results is nearly identical to the output of the
G-values from the base runs. The only difference is that the BS results
have different values in the \dQuote{run_type} column. In this case this
column contains information of the type of bootstrap.
}
\description{
Typical use of Bootstrap using Multilinear Engine version 2 (ME-2) will
provide three different files after a run: \dQuote{.dat}: machine readable
format, \dQuote{.rsd}: results for the residuals and \dQuote{.txt}: text file
with auxiliary information (i.e. headers). The headers in the text (.txt)
file are used in me2tools to split the data into several blocks. In this
function the F values are read using the following header information,
denoting the \dQuote{start} and \dQuote{end} lines of the block containing
the required data.
}
\section{Defining the block with data}{


The \dQuote{.dat} file contains a lot of empty lines, which are stripped
immediately after reading the file. This is important, as this ensures that
each block of data is contained withing two identifying strings.

The function uses these lines to determine the start and end line in which
the data lies. As such, the lines between start and end are read and parsed.

The identifying strings are provided using the \code{block_boundaries}, which
is a list containing the \dQuote{start} and \dQuote{end} string. The string
can be preceded by \code{^\\s*} which tells the function that the string can
begin with an undefined number of spaces.
}

\section{Adding dates to G}{

By far the easiest way to add \dQuote{dates} to G is to provide them as
input parameters. The dates can probably be found in the original data
input used for ME-2 calculations. For multi time ME-2 application these dates
correspond with the lowest time resolution.
}

\section{Renaming factor profiles}{

As the labels of the factor profiles are unknown, this routine reads them as
\dQuote{factor_xx}, with xx being a unique number and outputted as a
character array. The easiest way to work with this data is by re-coding this
vector as \code{factor}. Then the order of the factor profiles and the
correct names can be easily set using the following code.

\if{html}{\out{<div class="sourceCode R">}}\preformatted{mydata$factor <- factor(mydata$factor)
mydata$factor <- dplyr::recode_factor(mydata$factor,
                                      `factor_01` = "MyFirstName",
                                      `factor_02` = "MySecondName",
                                      ...
)
}\if{html}{\out{</div>}}

Please note that the above will only work when the data is read with the
\code{tidy_output = TRUE} setting.
}

\seealso{
\code{\link{me2_read_G}}, \code{\link{me2_DISP_read_G}},
\code{\link{me2_read_all}}, \code{\link{me2_read_dat}}
}
