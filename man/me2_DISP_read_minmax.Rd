% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/me2_DISP_read_minmax.R
\name{me2_DISP_read_minmax}
\alias{me2_DISP_read_minmax}
\title{Get the minimum and maximum DISP values from the DISP results file
(DISPres_x.txt)}
\usage{
me2_DISP_read_minmax(DISPres_file, tidy_output = FALSE, species = NA)
}
\arguments{
\item{DISPres_file}{location and file name of the \dQuote{DISPres_x} file,
corresponding to dQmax = 4, 8, 16, 32.}

\item{tidy_output}{Should the output be reshaped into tidy data? Default:
FALSE}

\item{species}{A vector containing the names of the species for the rows in
the F-matrix. If these species name are outputted in the ME-2 output as the
second column (a column of row numbers being the first), then these values
are used when \code{species = NA}. If this second column with names is not
available all species are named as \dQuote{species_xx}, with xx being an
unique number starting at 1.}
}
\value{
(tidied) tibble containing the minimum and maximum values for the
Best-fit with original values for the DISP runs. The output of the
min/max-values for the DISP result is identical to the output of the
F-values from the base runs. The only difference is that the DISP results
have different values in the \dQuote{run_type} column. In this case this
column contains either \dQuote{DISP_min} or \dQuote{DISP_max}.
}
\description{
The minimum and the maximum DISP values are stored in 4 different files,
corresponding to dQmax = 4, 8, 16, 32. Each of these files have the same
format, containing minimum and maximum DISP values in concentration units and
as percentage of species units. These are all read and stored in the output.
}
\section{Adding species to min/max}{

By far the easiest way to add \dQuote{species} to the DISP min/max results is
to provide them as input parameters. The species names can probably be found
in the original data input used for ME-2 calculations.

Other ways to replace the \dQuote{species} might be by using conditional
replacement of the default names or the use of solutions involving
\code{rep} to replicate elements of vectors.
}

\section{Renaming factor profiles}{

As the labels of the factor profiles are unknown, this routine reads them as
\dQuote{factor_xx}, with xx being a unique number and outputted as a
character array. The easiest way to work with this data is by re-coding this
vector as \code{factor}. Then the order of the factor profiles and the
correct names can be easily set using the following code.

\if{html}{\out{<div class="sourceCode R">}}\preformatted{mydata$factor <- factor(mydata$factor)
mydata$factor <- dplyr::recode_factor(mydata$factor,
                                      `factor_01` = "MyFirstName",
                                      `factor_02` = "MySecondName",
                                      ...
)
}\if{html}{\out{</div>}}

Please note that the above will only work when the data is read with the
\code{tidy_output = TRUE} setting.
}

\seealso{
\code{\link{me2_read_F}}, \code{\link{me2_BS_read_F}},
\code{\link{me2_DISP_read_F}}, \code{\link{me2_read_all}},
\code{\link{me2_read_dat}}
}
