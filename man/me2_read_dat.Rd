% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/me2_read_dat.R
\name{me2_read_dat}
\alias{me2_read_dat}
\title{Read G and F matrices from ME-2 .dat file}
\usage{
me2_read_dat(
  me2_dat_file,
  nrow_factor_mass = NA,
  dates = NA,
  species = NA,
  tidy_output = FALSE,
  rescale_unity = FALSE,
  threshold_unity = 0.01,
  tz = "Etc/GMT-1"
)
}
\arguments{
\item{me2_dat_file}{ME2 output file (.dat), containing the G and F matrices}

\item{nrow_factor_mass}{Which row in the F-matrix should be used to transform
the G contributions from unity to concentration units. This can also be a
vector with the same length of the number of factors. In that case, the
first factor is multiplied with the first item in this vector and so on.
Default: \code{NA}, meaning no G matrix in concentration units are
calculated.}

\item{dates}{This vector contains the sampling dates associated with the
G-matrix. It should have the same length as the number of rows in G.
Default: NA, meaning that the output is populated with daily dates starting
from \dQuote{1970-01-01}.}

\item{species}{This vector contains the species associated with the F-matrix.
It should have the same length as the number of rows in F. Default: NA,
meaning that the output for F is populated as \dQuote{species_xx}, with xx
being a unique number.}

\item{tidy_output}{Should the output of both G and F be reshaped into tidy
data? Default: FALSE}

\item{rescale_unity}{In some cases the averages of the G factors are not
equal to unity. By default a warning is given whenever this is the case.
With this parameter set to \code{TRUE} each factor is multiplied by
1/avg(factor), so that the G factors are scaled to unity again. Default:
FALSE}

\item{tz}{Parameter to control the time zone when parameter \dQuote{dates} is
not used. Default: 'Etc/GMT-1'}
}
\value{
\code{me2_read_dat} returns an object of class ``me2tools''.
The object includes three main components: \code{call}, the command used
to generate the plot; \code{F_matrix}, the F matrices for each run;
and \code{G_matrix}, the G matrices for each run. If retained, e.g., using
\code{output <- me2_read_dat(file)}, this output can be used to recover
the data, reproduce, or rework the original plot or undertake further
analysis.

An me2tools output can be manipulated using a number of generic operations,
including \code{print}, \code{plot} and \code{summary}.
}
\description{
Typical use of Multilinear Engine version 2 (ME-2) will provide three
different files after a run: \dQuote{.dat}: machine readable format,
\dQuote{.rsd}: results for the residuals and \dQuote{.txt}: text file with
auxiliary information (i.e. headers).
}
\details{
This function reads the results stored in the \dQuote{.dat} file. This data
consists of both the numerical matrices of both G and F (also in this order)
for each of the defined number of runs.

Additional information is needed to complement the G and F matrices. The
G matrix (contributions) are often associated with sample dates. These
sample dates can be given by the user using the \code{dates} variable. If
no dates are given, the function adds a daily date, starting from
\dQuote{1970-01-01} for every row in the G matrices.

For the F matrices the species names are often needed, and can be provided
through the \code{species} variable. If no species are provided, default
species names (i.e. \dQuote{species_xx}) are provided, with xx being a
unique number starting from 1.
}
\section{Adding dates and species to G and F}{

By far the easiest way to add \dQuote{dates} to G and \dQuote{species} to F
is to provide them as input parameters. In both cases these data can
probably be found in the original data input used for ME-2 calculations.

Other ways to replace the \dQuote{dates} and \dQuote{species} might be by
using conditional replacement of the default names or the use of solutions
involving \code{rep} to replicate elements of vectors.
}

\section{Renaming factor profiles}{

As the labels of the factor profiles are unknown, this routine reads them as
\dQuote{factor_xx}, with xx being a unique number and outputted as a
character array. The easiest way to work with this data is by re-coding this
vector as \code{factor}. Then the order of the factor profiles and the
correct names can be easily set using the following code.

\if{html}{\out{<div class="sourceCode R">}}\preformatted{mydata$factor <- factor(mydata$factor)
mydata$factor <- dplyr::recode_factor(mydata$factor,
                                      `factor_01` = "MyFirstName",
                                      `factor_02` = "MySecondName",
                                      ...
)
}\if{html}{\out{</div>}}

Please note that the above will only work when the data is read with the
\code{tidy_output = TRUE} setting.
}

\seealso{
\code{\link{me2_read_F}}, \code{\link{me2_read_G}},
\code{\link{me2_read_all}}
}
